#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Zarinit –Ω–∞ –Ω–æ–≤–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt &> /dev/null; then
            OS="ubuntu"
        elif command -v yum &> /dev/null; then
            OS="centos"
        else
            OS="linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    else
        OS="unknown"
    fi
    log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        log "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úì"
        return
    fi
    
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    case $OS in
        "ubuntu")
            sudo apt update
            sudo apt install -y docker.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            ;;
        "centos")
            sudo yum install -y docker docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            ;;
        "macos")
            warn "–î–ª—è macOS —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é:"
            warn "https://www.docker.com/products/docker-desktop/"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Desktop..."
            ;;
        *)
            error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é."
            ;;
    esac
    
    log "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úì"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
check_git() {
    if ! command -v git &> /dev/null; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git..."
        case $OS in
            "ubuntu") sudo apt install -y git ;;
            "centos") sudo yum install -y git ;;
            "macos") 
                if command -v brew &> /dev/null; then
                    brew install git
                else
                    error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew"
                fi
                ;;
        esac
    fi
    log "Git –¥–æ—Å—Ç—É–ø–µ–Ω ‚úì"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
clone_projects() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤..."
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    echo
    info "–í–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:"
    read -p "URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (ZarinitNew): " MAIN_REPO
    read -p "URL —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (cloud-auth) [Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞]: " AUTH_REPO
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É
    WORK_DIR="$HOME/zarinit-deployment"
    mkdir -p "$WORK_DIR"
    cd "$WORK_DIR"
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
    if [ ! -d "ZarinitNew" ]; then
        log "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..."
        git clone "$MAIN_REPO" ZarinitNew
    fi
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if [ -n "$AUTH_REPO" ] && [ ! -d "cloud-auth" ]; then
        log "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
        git clone "$AUTH_REPO" cloud-auth
    fi
    
    cd ZarinitNew
    log "–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤: $WORK_DIR"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ cloud-auth
    if [ -d "../cloud-auth" ]; then
        log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π..."
        sed -i.bak 's|/home/armen/–î–æ–∫—É–º–µ–Ω—Ç—ã/cloud-auth|../cloud-auth|g' docker-compose.yml
        DEPLOYMENT_MODE="full"
    else
        warn "cloud-auth –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞."
        DEPLOYMENT_MODE="frontend-only"
    fi
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    if [ ! -f ".env" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        cp .env.example .env 2>/dev/null || cat > .env << 'EOF'
POSTGRES_DB=adminka
POSTGRES_USER=postgres
POSTGRES_PASSWORD=secure_password_$(date +%s)
ROOT_USER_EMAIL=admin@localhost
ROOT_USER_PASSWORD=admin123
SECRET_KEY=secret_key_$(openssl rand -hex 32)
NGINX_PORT=80
EOF
    fi
    
    log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚úì"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    
    if lsof -Pi :80 -sTCP:LISTEN -t >/dev/null 2>&1; then
        warn "–ü–æ—Ä—Ç 80 –∑–∞–Ω—è—Ç. –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 8080..."
        sed -i.bak 's/"80:80"/"8080:80"/g' docker-compose*.yml
        PORT=8080
    else
        PORT=80
    fi
    
    log "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—Ç: $PORT"
}

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
deploy_system() {
    log "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
    if ! docker info &> /dev/null; then
        warn "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞..."
        case $OS in
            "ubuntu"|"centos") sudo systemctl start docker ;;
            "macos") open -a Docker ;;
        esac
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker
        timeout=30
        while [ $timeout -gt 0 ] && ! docker info &> /dev/null; do
            sleep 2
            timeout=$((timeout-2))
        done
        
        if ! docker info &> /dev/null; then
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if [ "$DEPLOYMENT_MODE" = "full" ]; then
        log "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
        if [ -f "deploy.sh" ]; then
            chmod +x deploy.sh
            ./deploy.sh
        else
            docker compose up -d
        fi
    else
        log "–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        docker compose -f docker-compose.frontend-only.yml up -d
    fi
    
    log "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚úì"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
show_result() {
    echo
    echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "=========================="
    echo
    
    if [ "$DEPLOYMENT_MODE" = "full" ]; then
        echo "üåê –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:$PORT/"
        echo "üîê –°–∏—Å—Ç–µ–º–∞ –≤—Ö–æ–¥–∞: http://localhost:$PORT/auth/login"
        echo "üë§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:$PORT/auth/dashboard"
        echo
        echo "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
        echo "  üìß Email: root@admin.com"
        echo "  üîí –ü–∞—Ä–æ–ª—å: admin123"
    else
        echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥): http://localhost:$PORT/"
        echo "‚ÑπÔ∏è  –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    echo
    echo "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "  üìä –°—Ç–∞—Ç—É—Å: docker compose ps"
    echo "  üìù –õ–æ–≥–∏: docker compose logs -f"
    echo "  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker compose restart"
    echo "  ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker compose down"
    echo
    echo "üìÅ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: $(pwd)"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ Zarinit - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –Ω–æ–≤–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    echo "=========================================================="
    echo
    
    detect_os
    check_git
    install_docker
    clone_projects
    setup_config
    check_ports
    deploy_system
    show_result
    
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞."
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'error "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"